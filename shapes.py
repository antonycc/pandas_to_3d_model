# Purpose: Define shapes for .obj files.

import sys
import datetime
from pathlib import Path
import collections
from functools import reduce

import config

logger = config.get_logger()

Object = collections.namedtuple('Object', '{} {} {}'.format('v', 'vn', 'f'))
Vertex = collections.namedtuple('Vertex', '{} {} {}'.format('x', 'y', 'z', 'w'))
Normal = collections.namedtuple('Normal', '{} {} {}'.format('x', 'y', 'z'))
Face = collections.namedtuple('Face', '{}'.format('vs'))


def build_unit_cube():
    # TODO: Use named tuples instead
    o = Object(v=list(), vn=list(), f=list())
    o.v.append(Vertex(x=0.0, y=0.0, z=0.0))
    o.v.append(Vertex(x=0.0, y=0.0, z=1.0))
    o.v.append(Vertex(x=0.0, y=1.0, z=0.0))
    o.v.append(Vertex(x=0.0, y=1.0, z=1.0))
    o.v.append(Vertex(x=1.0, y=0.0, z=0.0))
    o.v.append(Vertex(x=1.0, y=0.0, z=1.0))
    o.v.append(Vertex(x=1.0, y=1.0, z=0.0))
    o.v.append(Vertex(x=1.0, y=1.0, z=1.0))
    o.vn.append(Normal(x=0.0,  y=0.0,  z=1.0))
    o.vn.append(Normal(x=0.0,  y=0.0,  z=-1.0))
    o.vn.append(Normal(x=0.0,  y=1.0,  z=0.0))
    o.vn.append(Normal(x=0.0,  y=-1.0, z=0.0))
    o.vn.append(Normal(x=1.0,  y=0.0,  z=0.0))
    o.vn.append(Normal(x=-1.0, y=0.0,  z=0.0))
    o.f.append(Face(['1//2', '7//2', '5//2']))
    o.f.append(Face(['1//2', '3//2', '7//2']))
    o.f.append(Face(['1//6', '4//6', '3//6']))
    o.f.append(Face(['1//6', '2//6', '4//6']))
    o.f.append(Face(['3//3', '8//3', '7//3']))
    o.f.append(Face(['3//3', '4//3', '8//3']))
    o.f.append(Face(['5//5', '7//5', '8//5']))
    o.f.append(Face(['5//5', '8//5', '6//5']))
    o.f.append(Face(['1//4', '5//4', '6//4']))
    o.f.append(Face(['1//4', '6//4', '2//4']))
    o.f.append(Face(['2//1', '6//1', '8//1']))
    # o.f.append(Face(['2//1', '8//1', '4//1']))
    return o


def generate_lines(objects, generated_by, group):
    datetimestamp = datetime.datetime.now().isoformat().replace(':', '-').replace('.', '-')
    lines = list()
    lines.append('# Generated by: {}'.format(generated_by))
    lines.append('# Generated on: {}'.format(datetimestamp))
    lines.append('')
    lines.append('g {}'.format(group))
    lines.append('')
    for o in [o for o in objects if o.v]:
        lines.extend(['v  ' + '{}  {}  {}'.format(v.x, v.y, v.z) for v in o.v])
    lines.append('')
    for o in [o for o in objects if o.vn]:
        lines.extend(['vn ' + '{}  {}  {}'.format(vn.x, vn.y, vn.z) for vn in o.vn])
    lines.append('')
    for o in [o for o in objects if o.f]:
        lines.extend(['f  ' + reduce((lambda x, y: '{} {}'.format(x, y)), f.vs) for f in o.f])
    lines.append('')
    return lines


def save_as_obj(objects, output_filepath, generated_by=None, group=None):
    if not generated_by:
        generated_by = Path(sys.argv[0]).name
    if not group:
        group = output_filepath.stem
    obj_file_lines = generate_lines(objects, generated_by=generated_by, group=group)
    with open(str(output_filepath), 'w') as f:
        f.writelines([l + '\n' for l in obj_file_lines])
